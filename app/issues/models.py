import datetime
import itertools
from random import randint
from django.urls import reverse
from django.utils import timezone,  dateformat
from django.template.defaultfilters import slugify
from django.db import models
from users.models import CustomUser, Profile
from repositories.models import RepoFile, RepoFolder, Repository, LineOfCode


class TestIssue(models.Model):
    STATE_CHOICES = (
        ('open', 'open'),
        ('closed', 'closed'),
    )
    title = models.CharField(max_length=100)
    state = models.CharField(max_length=6, choices = STATE_CHOICES, default='open')
    body = models.TextField()
    number = models.IntegerField()
    created_at = models.DateTimeField(default=timezone.now)
    repository_url = models.URLField(max_length=200)
    repository = models.ForeignKey(
        Repository,
        max_length=100,
        on_delete=models.CASCADE,
        related_name='testissue_repo'
        )

    def save(self, *args, **kwargs):
        self.repository = Repository.objects.get(url=self.repository_url)
        super().save(*args, **kwargs)


def set_stamp(path, folder, fname, loc, date, stamp_id):
    stamp = (
        'Issue Location: ' + path + '\n' +
        'Affected Folder: ' + folder + '\n' +
        'Affected File: ' + fname + '\n' +
        'Affected Line of Code: ' + loc + '\n' +
        'Generated by Issue Tracker: ' + date + '\n' +
        'Stamp Id: ' + stamp_id + '\n' +
        '\n'
    )
    return stamp


def delete_stamp(issue):
    stamp = None
    return (issue, stamp)


def set_association_atrs(issue):
    if issue.associated_loc:
        loc = str(issue.associated_loc.line_number)
        issue.associated_file = issue.associated_loc.repofile
        issue.associated_folder = issue.associated_file.parent_folder
        file_name = str(issue.associated_file.name)
        folder_name = str(issue.associated_folder.name)
        full_path = str(issue.associated_file.repository.name) + '/' + str(issue.associated_file.path)

    elif issue.associated_file:
        loc = 'None'
        issue.associated_folder = issue.associated_file.parent_folder
        file_name = str(issue.associated_file.name)
        folder_name = str(issue.associated_folder.name)
        full_path = str(issue.associated_file.repository.name) + '/' + str(issue.associated_file.path)
    
    elif issue.associated_folder:
        loc = 'None'
        file_name = 'None'
        folder_name = str(issue.associated_folder.name)
        if issue.associated_folder.path:
            full_path = str(issue.repository.name) + '/' + str(issue.associated_folder.path)
        else:
            full_path = str(issue.repository.name)

    return (full_path, folder_name, file_name, loc)


def create_stamp(issue):
    stamp_id = str(randint(10000000, 99999999))
    date = dateformat.format(timezone.now(), 'Y-m-d H:i:s')
    path, folder, fname, loc = set_association_atrs(issue)
    stamp = set_stamp(path, folder, fname, loc, date, stamp_id)
    issue.stamp = stamp
    return issue.stamp


def update_stamp(issue):
    issue, issue.stamp = delete_stamp(issue)
    stamp = create_stamp(issue)
    return (issue, stamp)


def check_associations(old, issue):
    new = [issue.associated_folder, issue.associated_file, issue.associated_loc]

    old_none = all(atr is None for atr in old)
    new_none = all(atr is None for atr in new)


    if not issue.pk and new_none == False:
        issue.stamp = create_stamp(issue)

    elif old != new:

        if old_none == True and new_none == False:
            issue.stamp = create_stamp(issue)
        
        elif old_none == False and new_none == False:
            issue, issue.stamp = update_stamp(issue)

        elif old_none == False and new_none == True:
            issue, issue.stamp = delete_stamp(issue)
            return issue.stamp

    return issue.stamp


def generate_slug(instance, model):
    if hasattr(instance, 'name'):
        value = instance.name
        slug_value = slugify(value)
    else:
        value = instance.title
        slug_value = slugify(value).title()

    slug_candidate = slug_original = slug_value + '_' + str(1)
    for i in itertools.count(1):
        if not model.objects.filter(slug=slug_candidate).exists():
            break
        slug_candidate = '{}_{}'.format(slug_value, str(i))
    if i == 1:
        slug_new = slug_original
    else:
        slug_new = slug_candidate

    instance.slug = slug_new
    return instance.slug


class Issue(models.Model):
    STATE_CHOICES = (
        ('open', 'open'),
        ('closed', 'closed'),
    )

    title = models.CharField(max_length=100)
    state = models.CharField(max_length=6, choices = STATE_CHOICES, default='open')
    body = models.TextField(null=True, blank=True)
    created_at = models.DateTimeField(default=timezone.now)
    updated_at = models.DateTimeField(null=True, blank=True)
    closed_at = models.DateTimeField(null=True, blank=True) 
    number = models.IntegerField(null=True, blank=True)
    slug = models.SlugField(max_length = 200, unique=True)
    stamp = models.TextField(null=True, blank=True, editable=False)

    author = models.ForeignKey(
       Profile,
       max_length=100,
       on_delete=models.CASCADE,
       related_name='issue_author'
    )
    repository = models.ForeignKey(
        Repository,
        max_length=100,
        on_delete=models.CASCADE,
        related_name='issue_repo'
        )
    associated_folder = models.ForeignKey(
        RepoFolder, 
        max_length=100, 
        on_delete=models.CASCADE, 
        related_name='repofolder', 
        blank=True,
        null=True
        )
    associated_file = models.ForeignKey(
        RepoFile, 
        max_length=100, 
        on_delete=models.CASCADE, 
        related_name='repofile', 
        blank=True,
        null=True
        )
    associated_loc = models.ForeignKey(
        LineOfCode, 
        max_length=100, 
        on_delete=models.CASCADE, 
        related_name='issue_loc', 
        blank=True,
        null=True
        )
    
    def __init__(self, *args, **kwargs):
        super (Issue, self).__init__(*args, **kwargs)
        self.__original_title = self.title
        self.__original_associated_folder = self.associated_folder
        self.__original_associated_file = self.associated_file
        self.__original_associated_loc = self.associated_loc

    def save(self, *args, **kwargs):
        if not self.pk:
            self.slug = generate_slug(self, Issue)
        elif self.title != self.__original_title:
            self.slug = generate_slug(self, Issue)

        old = [self.__original_associated_folder, self.__original_associated_file, self.__original_associated_loc]
        self.stamp = check_associations(old, self)
        super().save(*args, **kwargs)
    
    def get_absolute_url(self):
        return reverse('issue-read', kwargs={'issue_slug': self.slug})

    def __str__(self):
        return self.title
